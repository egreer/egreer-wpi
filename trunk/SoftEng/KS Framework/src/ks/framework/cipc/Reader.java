package ks.framework.cipc;

import ks.framework.common.Message;
import ks.framework.common.network.CommunicationAgent;
import ks.framework.interfaces.IConnectionHandler;
import ks.framework.interfaces.IProcessMessage;
/**
 * The Reader class is responsible for interpreting all communication from the
 * server.
 * 
 * It executes in its own thread.
 * 
 * Creation date: (10/7/01 9:15:14 PM)
 * 
 * @author George T. Heineman (heineman@cs.wpi.edu)
 */

class Reader implements Runnable {
	/** Knows which object is responsible for processing messages. */
	private IProcessMessage parent;

	/** Input agent. */
	private CommunicationAgent agent;
	
	/** When Reader is disconnected, must alert someone. */
	private IConnectionHandler connector;
	
	/** Our own thread of control. */
	private Thread thread = null;

	/** show debug messages. */
	boolean debug = false;
	
	/** Construct reader with Talker in mind. */ 
	public Reader(CommunicationAgent agent, IProcessMessage parent, IConnectionHandler connector) {
		this.parent = parent;
		this.agent = agent;
		this.connector = connector;
	}

	/**
	 * This thread waits for any input generated by Talker's behavior with the
	 * Server.
	 * 
	 * There may be problems when disconnecting since two threads are in
	 * contention for the serverOutput object stream (see readLine in Talker).
	 */
	public void run() {
		try {
			while (true) {
				// Block waiting for any response from the server.
				if (debug) {
					System.out.println ("Client reader waiting to read");
				}
				Message m = (Message) agent.readObject();
	
				// if null, the server has shut down.
				if (m == null)
					break;
				
				// Have ClientInterface process the request. This is done to avoid reader
				// from having to know the entity who instantiated it.
				parent.process (m);
			}
		} catch (RuntimeException re) {
			re.printStackTrace();
			System.err.println ("Exiting reader.");
		}
		
		// terminate.
		agent.close();
		connector.connected(false);
	}

	/**
	 * Start the thread off as a Daemon thread.
	 */
	public void start() {
		if (thread == null) {
			if (debug) {
				System.out.println ("Client reader starting");
			}
			thread = new Thread(this);
			thread.setDaemon(true);
			thread.start();
		}
	}
}